#!/usr/bin/env node

/*
MIT License

Copyright (c) 2019 oO (https://github.com/oocytanb)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

// **出力した実データをサンプルとして、仕様不明な状態で仮実装しています。仕様が判明したら適宜修正してお使いください。**

'use strict'

const program = require('commander')
const readline = require('readline')
const WebSocket = require('ws')
const BufferList = require('bl')
const msgpack = require('msgpack5')()

const VciLogRecordType = Object.freeze({
  Unknown: 'unknown',
  Logger: 'logger'
})

const VciLogFormatType = Object.freeze({
  Default: 'default',
  JsonRecord: 'json_record',
  FullText: 'full_text'
})

const VciLogRecordSystemCategorySet = new Set(['System'])

const VciLogRecordSystemStatusCategorySet = new Set(['SystemStatus'])

const VciLogRecordStateSharedVariableCategorySet = new Set(['Item_State', 'SharedVariable'])

const VciLogRecordItemParameterKeySet = new Set(['Item'])

const parseVciLogRecord = Symbol('parseVciLogRecord')
const vciLogElementsToMap = Symbol('vciLogElementsToMap')

function controlCodeToString (code) {
  return '<' + (code < 16 ? '0' : '') + code.toString(16) + '>'
}

function isPrintableOrWhitespace (code) {
  return (code >= 0x20 && code <= 0x7E) || (code >= 0x09 && code <= 0x0D)
}

/**
 * VCI のログのレコード。
 */
class VciLogRecord {
  /**
   * @param {VciLogRecord.RecordType} type レコードのタイプ。
   * @param {Map} parameterMap キーペア形式のパラメーターオブジェクト。
   * @param {Array} metaList メタ要素の配列。
   */
  constructor (type, parameterMap, metaList = undefined) {
    this.type = type
    this.metaList = metaList || []
    this.parameterMap = parameterMap || new Map()
  }

  static get RecordType () { return VciLogRecordType }

  static get TextParameterKey () { return '__vci_logcat_text_parameter' }

  static get FormatType () { return VciLogFormatType }

  /**
   * VCI のログのレコードをパースする。
   *
   * @param {(string|Buffer|ArrayBuffer)} data ws.on('message') で受信したデータを指定する。
   *
   * @return {VciLogRecord} パース結果のオブジェクトを返す。
   */
  static parse (data) {
    if (data instanceof String || typeof data === 'string') {
      return new this(VciLogRecordType.Unknown, new Map([[VciLogRecord.TextParameterKey, data]]))
    } else if (data instanceof Buffer) {
      return this[parseVciLogRecord](data)
    } else if (data instanceof ArrayBuffer) {
      return this[parseVciLogRecord](Buffer.from(data))
    } else if (Array.isArray(data)) {
      const bl = new BufferList()
      for (const entry of data) {
        if (entry instanceof Buffer) {
          bl.append(entry)
        }
      }
      return this[parseVciLogRecord](bl)
    } else {
      return new this(VciLogRecordType.Unknown, new Map([[VciLogRecord.TextParameterKey, `[Unsupported data type: ${typeof data}]`]]))
    }
  }

  /**
   * ログレコードのパースを実行する。
   *
   * print() ログのサンプルデータ:
   * ```
   * [
   *   2,
   *   logger,
   *   [
   *     {
   *       "UnixTime": "1550923200",
   *       "Category": "Item_Print",
   *       "LogLevel": "Debug",
   *       "Item": "ITEM_NAME",
   *       "Message": "write {Application.persistentDataPath}/EmbeddedScriptWorkspace/ITEM_NAME/_main.lua",
   *       "CallerFile": "C:\ProgramData\Jenkins\workspace\vrlive-client\Build_Bundle\VRLive\Assets\VRM\VCI-Embedded-Script\Scripts\EmbeddedScriptUnitySide.cs",
   *       "CallerLine": 262,
   *       "CallerMember": "_NewItem"
   *     }
   *   ]
   * ]
   * ```
   *
   * @param {(Buffer|BufferList)} bl ログデータのバッファー。
   *
   * @return {VciLogRecord} パース結果のオブジェクトを返す。
   */
  static [parseVciLogRecord] (buffer) {
    const bl = (buffer instanceof BufferList) ? buffer : new BufferList().append(buffer)

    //
    try {
      const root = msgpack.decode(bl.duplicate())

      if (root instanceof Array &&
          root.length >= 3 && root[1] === 'logger' &&
          root[2] instanceof Array) {
        // VCI ログデータの形式として扱う
        const nodeList = root[2]
        const parameterMap = (nodeList.length >= 1 && typeof nodeList[0] === 'object') ? this[vciLogElementsToMap](nodeList[0]) : new Map()
        const metaList = root.slice(0, 2)
        return new VciLogRecord(VciLogRecordType.Logger, parameterMap, metaList)
      }
    } catch (error) {
    }

    // 不明なデータ形式
    {
      let str = ''
      let controlFlag = false
      for (let i = 0, len = bl.length; i < len; ++i) {
        const cc = bl.get(i)
        if (isPrintableOrWhitespace(cc)) {
          if (controlFlag) {
            str += ' '
          }
          str += String.fromCharCode(cc)
          controlFlag = false
        } else {
          if (str) {
            str += ' '
          }
          str += controlCodeToString(cc)
          controlFlag = true
        }
      }

      return new VciLogRecord(VciLogRecordType.Unknown, new Map([[VciLogRecord.TextParameterKey, str]]))
    }
  }

  static [vciLogElementsToMap] (elements) {
    // VCAS 1.7.2a から'Message' 要素が、ダブルクウォートで囲まれるようになったので、取り除く処理を追加する
    // return new Map(Object.entries(elements))
    return Object.entries(elements).reduce((acc, [key, value]) => acc.set(key,
      (key === 'Message' && typeof value === 'string' && value.length >= 2 && value.charAt(0) === '"' && value.charAt(value.length - 1) === '"') ? value.substring(1, value.length - 1) : value
    ), new Map())
  }

  toString () {
    return this.format(VciLogRecord.FormatType.Default)
  }

  /**
   * 指定したフォーマットに整形する。
   *
   * @param {VciLogRecord.FormatType} formatType フォーマットを指定する。
   *
   * @return {string} フォーマットした文字列。
   */
  format (formatType) {
    switch (formatType) {
      case VciLogRecord.FormatType.JsonRecord:
        return this._formatJsonRecord()
      case VciLogRecord.FormatType.FullText:
        return this._formatFullText()
      default:
        return this._formatDefault()
    }
  }

  _formatDefault () {
    if (this.type !== VciLogRecordType.Logger) {
      // 不明な形式の場合は、すべての要素を文字列化する
      return this._formatFullText()
    }

    //
    let str = 'Log'

    const timeString = this.parameterMap.get('UnixTime')
    if (timeString !== undefined) {
      const time = Number.parseInt(timeString, 10)
      if (Number.isFinite(time)) {
        const date = new Date(time * 1000)
        str += ` | ${('0' + date.getHours()).slice(-2)}:${('0' + date.getMinutes()).slice(-2)}:${('0' + date.getSeconds()).slice(-2)}`
      }
    }

    for (const key of ['Category', 'Item', 'Message']) {
      const value = this.parameterMap.get(key)
      if (value !== undefined) {
        str += ` | ${value}`
      }
    }

    return str
  }

  _formatJsonRecord () {
    return JSON.stringify({
      type: this.type,
      meta_list: this.metaList,
      parameters: [...this.parameterMap].reduce((acc, [key, value]) => Object.assign(acc, { [key]: value }), {})
    })
  }

  _formatFullText () {
    let str = JSON.stringify(this.metaList)

    for (const [key, value] of this.parameterMap) {
      if (key === VciLogRecord.TextParameterKey) {
        str += (str ? ' | ' : '') + value
      } else {
        str += (str ? ' | ' : '') + key + ' = ' + value
      }
    }

    return str
  }

  /**
   * レコードのテスト条件。
   * @typedef {Object} TestConditions
   * @property {boolean} [allWarnings] すべての警告を含めるか。(例: "frame: script not return")
   * @property {boolean} [outputSystemStatus] システムステータスを出力するか。
   * @property {boolean} [suppressStateSharedVariable] `vci.state` と `vci.studio.shared` のログを抑制するか。
   * @property {(RegExp|string)} [includeItem] アイテム名の検索パターン。
   *    - `RegExp` 型を指定した場合は、`regexSearch` と `caseSensitive` は無視され、正規表現検索が行われる。
   *    - `string` 型を指定した場合は、`regexSearch` に `true` を指定した場合は、正規表現検索を試みる。`regexSearch` に `true` を指定しなかったか、正規表現のコンパイルに失敗した場合は、プレーンテキスト検索を行う。
   * @property {boolean} [regexSearch] 正規表現検索を有効にするか。
   * @property {boolean} [caseSensitive] 大文字と小文字を区別するか。
   */

  /**
   * 指定した条件を満たすかをテストする。
   *
   * @param {TestConditions} conditions テスト条件を指定する。
   *
   * @return {boolean} テスト結果を真偽値で返す。
   */
  test (conditions) {
    return (
      (conditions.allWarnings || !this._messageContainsScriptNotReturn()) &&
      (conditions.outputSystemStatus || !this._categoryIn(VciLogRecordSystemStatusCategorySet)) &&
      (!conditions.suppressStateSharedVariable || !this._categoryIn(VciLogRecordStateSharedVariableCategorySet)) &&
      (!conditions.includeItem || this._parameterIncludes(VciLogRecordItemParameterKeySet, conditions.includeItem, !!conditions.regexSearch))
    )
  }

  _categoryIn (categorySet) {
    return this.type === VciLogRecord.RecordType.Logger && categorySet.has(this.parameterMap.get('Category'))
  }

  _messageContainsScriptNotReturn () {
    // 'frame: script not return' メッセージが含まれているかを調べる
    return this._categoryIn(VciLogRecordSystemCategorySet) && /frame:\s+script\s+not\s+return/.test(this.parameterMap.get('Message'))
  }

  _someParameter (keySet, pred) {
    for (const key of keySet) {
      const val = this.parameterMap.get(key)
      if (typeof val === 'string' && pred(val)) {
        return true
      }
    }
    return false
  }

  _parameterIncludes (keySet, pattern, regexSearch = false, caseSensitive = false) {
    if (this.type !== VciLogRecord.RecordType.Logger) {
      return false
    }

    if (pattern instanceof RegExp) {
      return this._someParameter(keySet, val => pattern.test(val))
    } else if (typeof pattern === 'string') {
      if (regexSearch) {
        try {
          const re = new RegExp(pattern, caseSensitive ? '' : 'i')
          return this._someParameter(keySet, val => re.test(val))
        } catch (e) {
          // 正規表現パターンに誤りがある場合は、正規表現を使用しない
        }
      }
    } else {
      return false
    }

    // プレーンテキストとして検索する
    if (caseSensitive) {
      return this._someParameter(keySet, val => val.includes(pattern))
    } else {
      const lcp = pattern.toLowerCase()
      return this._someParameter(keySet, val => val.toLowerCase().includes(lcp))
    }
  }
}

//
program
  .version(require('../package.json').version)
  .usage('[options]')
  .option('-c, --connect <url>', 'connect to VCI WebSocket console (Default: ws://localhost:8080)')
  .option('-f, --format <format>', 'output format (default | json_record | full_text)')
  .option('-A, --all-warnings', 'output all the warnings such as "script not return"')
  .option('--output-system-status', 'output system status')
  .option('-s, --suppress-state-shared-variable', 'suppress "Item_State" and "SharedVariable" categories')
  .option('-i, --include-item <name>', 'specify the item name to include')
  .option('-r, --regex-search', 'enable regular expression search')
  .parse(process.argv);

(url => {
  let logFormat
  if (program.format) {
    const formatOption = program.format.toLowerCase()
    const formatTypes = Object.values(VciLogRecord.FormatType)
    const formatIndex = formatTypes.indexOf(formatOption)
    logFormat = formatIndex >= 0 ? formatTypes[formatIndex] : VciLogRecord.FormatType.Default
  } else {
    logFormat = VciLogRecord.FormatType.Default
  }

  const rl = readline.createInterface({ input: process.stdin })

  const destAddress = /\w+:\/\/.*$/i.test(url) ? url : `ws://${url}`
  const ws = new WebSocket(destAddress)

  ws.on('open', () => {
    console.error('connected [%s] (press CTRL+C to quit)', destAddress)
  })

  ws.on('close', code => {
    console.error('disconnected [code: %d]', code)
    process.exit()
  })

  ws.on('error', error => {
    console.error('error: %s', error.message)
    process.exit(-1)
  })

  ws.on('message', data => {
    const record = VciLogRecord.parse(data)
    if (record.test(program)) {
      console.log(record.format(logFormat))
    }
  })

  rl.on('close', () => {
    ws.close()
    process.exit()
  })
})(program.connect || 'ws://localhost:8080')
